import { SDKManifest } from "../../manifest/ManifestTypes";
import { ExpectedExports } from "../../types";
import { Migration } from "./Migration";
export declare class Migrations {
    readonly manifest: SDKManifest;
    readonly migrations: Array<Migration<any>>;
    private constructor();
    private sortedMigrations;
    private currentVersion;
    static of<Migrations extends Array<Migration<any>>>(manifest: SDKManifest, ...migrations: EnsureUniqueId<Migrations>): import("./setupMigrations").Migrations;
    init({ effects, previousVersion, }: Parameters<ExpectedExports.init>[0]): Promise<void>;
    uninit({ effects, nextVersion, }: Parameters<ExpectedExports.uninit>[0]): Promise<void>;
}
export declare function setupMigrations<Migrations extends Array<Migration<any>>>(manifest: SDKManifest, ...migrations: EnsureUniqueId<Migrations>): import("./setupMigrations").Migrations;
export type EnsureUniqueId<A, B = A, ids = never> = B extends [] ? A : B extends [Migration<infer id>, ...infer Rest] ? (id extends ids ? "One of the ids are not unique"[] : EnsureUniqueId<A, Rest, id | ids>) : "There exists a migration that is not a Migration"[];
