import { EmVer } from "../../emverLite/mod";
import { once } from "../../util/once";
export class Migrations {
    manifest;
    migrations;
    constructor(manifest, migrations) {
        this.manifest = manifest;
        this.migrations = migrations;
    }
    sortedMigrations = once(() => {
        const migrationsAsVersions = this.migrations.map((x) => [EmVer.parse(x.options.version), x]);
        migrationsAsVersions.sort((a, b) => a[0].compareForSort(b[0]));
        return migrationsAsVersions;
    });
    currentVersion = once(() => EmVer.parse(this.manifest.version));
    static of(manifest, ...migrations) {
        return new Migrations(manifest, migrations);
    }
    async init({ effects, previousVersion, }) {
        if (!!previousVersion) {
            const previousVersionEmVer = EmVer.parse(previousVersion);
            for (const [_, migration] of this.sortedMigrations()
                .filter((x) => x[0].greaterThan(previousVersionEmVer))
                .filter((x) => x[0].lessThanOrEqual(this.currentVersion()))) {
                await migration.up({ effects });
            }
        }
    }
    async uninit({ effects, nextVersion, }) {
        if (!!nextVersion) {
            const nextVersionEmVer = EmVer.parse(nextVersion);
            const reversed = [...this.sortedMigrations()].reverse();
            for (const [_, migration] of reversed
                .filter((x) => x[0].greaterThan(nextVersionEmVer))
                .filter((x) => x[0].lessThanOrEqual(this.currentVersion()))) {
                await migration.down({ effects });
            }
        }
    }
}
export function setupMigrations(manifest, ...migrations) {
    return Migrations.of(manifest, ...migrations);
}
