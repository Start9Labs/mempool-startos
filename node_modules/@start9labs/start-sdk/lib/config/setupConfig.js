import * as D from "./dependencies";
import { utils } from "../util";
import nullIfEmpty from "../util/nullIfEmpty";
/**
 * We want to setup a config export with a get and set, this
 * is going to be the default helper to setup config, because it will help
 * enforce that we have a spec, write, and reading.
 * @param options
 * @returns
 */
export function setupConfig(spec, write, read) {
    const validator = spec.validator;
    return {
        setConfig: (async ({ effects, input }) => {
            if (!validator.test(input)) {
                await effects.console.error(String(validator.errorMessage(input)));
                return { error: "Set config type error for config" };
            }
            const { restart } = await write({
                input: JSON.parse(JSON.stringify(input)),
                effects,
                utils: utils(effects),
                dependencies: D.dependenciesSet(),
            });
            if (restart) {
                await effects.restart();
            }
        }),
        getConfig: (async ({ effects }) => {
            const myUtils = utils(effects);
            const configValue = nullIfEmpty((await read({ effects, utils: myUtils })) || null);
            return {
                spec: await spec.build({
                    effects,
                    utils: myUtils,
                }),
                config: configValue,
            };
        }),
    };
}
export default setupConfig;
