import { arrayOf, number, string } from "ts-matches";
/**
 * Used as a subtype of Value.list
```ts
export const authorizationList = List.string({
  "name": "Authorization",
  "range": "[0,*)",
  "default": [],
  "description": "Username and hashed password for JSON-RPC connections. RPC clients connect using the usual http basic authentication.",
  "warning": null
}, {"masked":false,"placeholder":null,"pattern":"^[a-zA-Z0-9_-]+:([0-9a-fA-F]{2})+\\$([0-9a-fA-F]{2})+$","patternDescription":"Each item must be of the form \"<USERNAME>:<SALT>$<HASH>\"."});
export const auth = Value.list(authorizationList);
```
*/
export class List {
    build;
    validator;
    constructor(build, validator) {
        this.build = build;
        this.validator = validator;
    }
    static text(a, aSpec) {
        return new List(() => {
            const spec = {
                type: "text",
                placeholder: null,
                minLength: null,
                maxLength: null,
                masked: false,
                inputmode: "text",
                ...aSpec,
            };
            return {
                description: null,
                warning: null,
                default: [],
                type: "list",
                minLength: null,
                maxLength: null,
                disabled: false,
                ...a,
                spec,
            };
        }, arrayOf(string));
    }
    static dynamicText(getA) {
        return new List(async (options) => {
            const { spec: aSpec, ...a } = await getA(options);
            const spec = {
                type: "text",
                placeholder: null,
                minLength: null,
                maxLength: null,
                masked: false,
                inputmode: "text",
                ...aSpec,
            };
            return {
                description: null,
                warning: null,
                default: [],
                type: "list",
                minLength: null,
                maxLength: null,
                disabled: false,
                ...a,
                spec,
            };
        }, arrayOf(string));
    }
    static number(a, aSpec) {
        return new List(() => {
            const spec = {
                type: "number",
                placeholder: null,
                min: null,
                max: null,
                step: null,
                units: null,
                ...aSpec,
            };
            return {
                description: null,
                warning: null,
                minLength: null,
                maxLength: null,
                default: [],
                type: "list",
                disabled: false,
                ...a,
                spec,
            };
        }, arrayOf(number));
    }
    static dynamicNumber(getA) {
        return new List(async (options) => {
            const { spec: aSpec, ...a } = await getA(options);
            const spec = {
                type: "number",
                placeholder: null,
                min: null,
                max: null,
                step: null,
                units: null,
                ...aSpec,
            };
            return {
                description: null,
                warning: null,
                minLength: null,
                maxLength: null,
                default: [],
                type: "list",
                disabled: false,
                ...a,
                spec,
            };
        }, arrayOf(number));
    }
    static obj(a, aSpec) {
        return new List(async (options) => {
            const { spec: previousSpecSpec, ...restSpec } = aSpec;
            const specSpec = await previousSpecSpec.build(options);
            const spec = {
                type: "object",
                displayAs: null,
                uniqueBy: null,
                ...restSpec,
                spec: specSpec,
            };
            const value = {
                spec,
                default: [],
                ...a,
            };
            return {
                description: null,
                warning: null,
                minLength: null,
                maxLength: null,
                type: "list",
                disabled: false,
                ...value,
            };
        }, arrayOf(aSpec.spec.validator));
    }
    /**
     * Use this during the times that the input needs a more specific type.
     * Used in types that the value/ variant/ list/ config is constructed somewhere else.
    ```ts
    const a = Config.text({
      name: "a",
      required: false,
    })
  
    return Config.of<WrapperData>()({
      myValue: a.withWrapperData(),
    })
    ```
     */
    withWrapperData() {
        return this;
    }
}
