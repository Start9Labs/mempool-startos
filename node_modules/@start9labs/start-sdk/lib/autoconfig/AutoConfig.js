import { utils } from "../util";
import { deepEqual } from "../util/deepEqual";
import { deepMerge } from "../util/deepMerge";
export class AutoConfig {
    configs;
    path;
    constructor(configs, path) {
        this.configs = configs;
        this.path = path;
    }
    async check(options) {
        const origConfig = JSON.parse(JSON.stringify(options.localConfig));
        const newOptions = {
            ...options,
            utils: utils(options.effects),
            localConfig: options.localConfig,
            remoteConfig: options.remoteConfig,
        };
        if (!deepEqual(origConfig, deepMerge({}, options.localConfig, await this.configs[this.path](newOptions))))
            throw new Error(`Check failed for ${this.path}`);
    }
    async autoConfigure(options) {
        const newOptions = {
            ...options,
            utils: utils(options.effects),
            localConfig: options.localConfig,
            remoteConfig: options.remoteConfig,
        };
        return deepMerge({}, options.localConfig, await this.configs[this.path](newOptions));
    }
}
