import { AutoConfigure, DeepPartial, Effects } from "../types";
import { Utils } from "../util";
export type AutoConfigFrom<WD, Input, NestedConfigs> = {
    [key in keyof NestedConfigs & string]: (options: {
        effects: Effects;
        localConfig: Input;
        remoteConfig: NestedConfigs[key];
        utils: Utils<WD>;
    }) => Promise<void | DeepPartial<NestedConfigs[key]>>;
};
export declare class AutoConfig<WD, Input, NestedConfigs> {
    readonly configs: AutoConfigFrom<WD, Input, NestedConfigs>;
    readonly path: keyof AutoConfigFrom<WD, Input, NestedConfigs>;
    constructor(configs: AutoConfigFrom<WD, Input, NestedConfigs>, path: keyof AutoConfigFrom<WD, Input, NestedConfigs>);
    check(options: Parameters<AutoConfigure["check"]>[0]): ReturnType<AutoConfigure["check"]>;
    autoConfigure(options: Parameters<AutoConfigure["autoConfigure"]>[0]): ReturnType<AutoConfigure["autoConfigure"]>;
}
