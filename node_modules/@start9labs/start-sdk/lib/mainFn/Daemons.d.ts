import { HealthReceipt } from "../health/HealthReceipt";
import { CheckResult } from "../health/checkFns";
import { Trigger } from "../health/trigger";
import { Effects, ValidIfNoStupidEscape } from "../types";
import { InterfaceReceipt } from "./interfaceReceipt";
type Daemon<Ids extends string, Command extends string, Id extends string> = {
    id: "" extends Id ? never : Id;
    command: ValidIfNoStupidEscape<Command> | [string, ...string[]];
    env?: Record<string, string>;
    ready: {
        display: string | null;
        fn: () => Promise<CheckResult> | CheckResult;
        trigger?: Trigger;
    };
    requires: Exclude<Ids, Id>[];
};
type ErrorDuplicateId<Id extends string> = `The id '${Id}' is already used`;
/**
 * A class for defining and controlling the service daemons
```ts
Daemons.of({
  effects,
  started,
  interfaceReceipt, // Provide the interfaceReceipt to prove it was completed
  healthReceipts, // Provide the healthReceipts or [] to prove they were at least considered
}).addDaemon('webui', {
  command: 'hello-world', // The command to start the daemon
  ready: {
    display: 'Web Interface',
    // The function to run to determine the health status of the daemon
    fn: () =>
      checkPortListening(effects, 80, {
        successMessage: 'The web interface is ready',
        errorMessage: 'The web interface is not ready',
      }),
  },
  requires: [],
})
```
 */
export declare class Daemons<Ids extends string> {
    readonly effects: Effects;
    readonly started: (onTerm: () => void) => null;
    readonly daemons?: Daemon<Ids, "command", Ids>[] | undefined;
    private constructor();
    /**
     * Returns an empty new Daemons class with the provided config.
     *
     * Call .addDaemon() on the returned class to add a daemon.
     *
     * Daemons run in the order they are defined, with latter daemons being capable of
     * depending on prior daemons
     * @param config
     * @returns
     */
    static of(config: {
        effects: Effects;
        started: (onTerm: () => void) => null;
        interfaceReceipt: InterfaceReceipt;
        healthReceipts: HealthReceipt[];
    }): Daemons<never>;
    /**
     * Returns the complete list of daemons, including the one defined here
     * @param id
     * @param newDaemon
     * @returns
     */
    addDaemon<Id extends string, Command extends string>(id: "" extends Id ? never : ErrorDuplicateId<Id> extends Id ? never : Id extends Ids ? ErrorDuplicateId<Id> : Id, newDaemon: Omit<Daemon<Ids, Command, Id>, "id">): Daemons<Ids | Id>;
    build(): Promise<{
        term(): Promise<void>;
        wait(): Promise<void>;
    }>;
}
export {};
