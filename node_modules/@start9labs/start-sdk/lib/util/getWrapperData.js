export class GetWrapperData {
    effects;
    path;
    options;
    constructor(effects, path, options = {}) {
        this.effects = effects;
        this.path = path;
        this.options = options;
    }
    /**
     * Returns the value of WrapperData at the provided path. Restart the service if the value changes
     */
    const() {
        return this.effects.getWrapperData({
            ...this.options,
            path: this.path,
            callback: this.effects.restart,
        });
    }
    /**
     * Returns the value of WrapperData at the provided path. Does nothing if the value changes
     */
    once() {
        return this.effects.getWrapperData({
            ...this.options,
            path: this.path,
            callback: () => { },
        });
    }
    /**
     * Watches the value of WrapperData at the provided path. Takes a custom callback function to run whenever the value changes
     */
    async *watch() {
        while (true) {
            let callback;
            const waitForNext = new Promise((resolve) => {
                callback = resolve;
            });
            yield await this.effects.getWrapperData({
                ...this.options,
                path: this.path,
                callback: () => callback(),
            });
            await waitForNext;
        }
    }
}
export function getWrapperData(effects, path, options = {}) {
    return new GetWrapperData(effects, path, options);
}
