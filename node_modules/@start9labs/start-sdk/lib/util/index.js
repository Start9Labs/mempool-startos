import nullIfEmpty from "./nullIfEmpty";
import { getWrapperData } from "./getWrapperData";
import { checkPortListening, checkWebUrl, } from "../health/checkFns";
import { GetSystemSmtp } from "./GetSystemSmtp";
import "./nullIfEmpty";
import "./fileHelper";
import "./getWrapperData";
import "./deepEqual";
import "./deepMerge";
import "./once";
import { LocalPort } from "../mainFn/LocalPort";
import { NetworkBuilder } from "../mainFn/NetworkBuilder";
import { TorHostname } from "../mainFn/TorHostname";
/** Used to check if the file exists before hand */
export const exists = (effects, props) => effects.metadata(props).then((_) => true, (_) => false);
export const isKnownError = (e) => e instanceof Object && ("error" in e || "error-code" in e);
function withAffine() {
    return {};
}
export const utils = (effects) => ({
    getSystemSmtp: () => new GetSystemSmtp(effects),
    readFile: (fileHelper) => fileHelper.read(effects),
    writeFile: (fileHelper, data) => fileHelper.write(data, effects),
    exists: (props) => exists(effects, props),
    nullIfEmpty,
    getWrapperData: (packageId, path) => getWrapperData(effects, path, {
        packageId,
    }),
    getOwnWrapperData: (path) => getWrapperData(effects, path),
    setOwnWrapperData: (path, value) => effects.setWrapperData({ value, path: path }),
    checkPortListening: checkPortListening.bind(null, effects),
    checkWebUrl: checkWebUrl.bind(null, effects),
    bindLan: async (port) => LocalPort.bindLan(effects, port),
    networkBuilder: () => NetworkBuilder.of(effects),
    torHostName: (id) => TorHostname.of(effects, id),
});
