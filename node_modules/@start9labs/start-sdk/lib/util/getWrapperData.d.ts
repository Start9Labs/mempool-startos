import { Effects, EnsureWrapperDataPath, ExtractWrapperData } from "../types";
export declare class GetWrapperData<WrapperData, Path extends string> {
    readonly effects: Effects;
    readonly path: Path & EnsureWrapperDataPath<WrapperData, Path>;
    readonly options: {
        /** Defaults to what ever the package currently in */
        packageId?: string | undefined;
    };
    constructor(effects: Effects, path: Path & EnsureWrapperDataPath<WrapperData, Path>, options?: {
        /** Defaults to what ever the package currently in */
        packageId?: string | undefined;
    });
    /**
     * Returns the value of WrapperData at the provided path. Restart the service if the value changes
     */
    const(): Promise<ExtractWrapperData<WrapperData, Path>>;
    /**
     * Returns the value of WrapperData at the provided path. Does nothing if the value changes
     */
    once(): Promise<ExtractWrapperData<WrapperData, Path>>;
    /**
     * Watches the value of WrapperData at the provided path. Takes a custom callback function to run whenever the value changes
     */
    watch(): AsyncGenerator<ExtractWrapperData<WrapperData, Path>, void, unknown>;
}
export declare function getWrapperData<WrapperData, Path extends string>(effects: Effects, path: Path & EnsureWrapperDataPath<WrapperData, Path>, options?: {
    /** Defaults to what ever the package currently in */
    packageId?: string | undefined;
}): GetWrapperData<WrapperData, Path>;
