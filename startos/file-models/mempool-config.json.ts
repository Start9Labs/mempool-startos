import { matches, FileHelper } from '@start9labs/start-sdk'
const { object, string, boolean, number, array } = matches

const shape = object({
  string: object({
    OFFICIAL: boolean,
    NETWORK: string,
    BACKEND: string,
    ENABLED: boolean,
    HTTP_PORT: number,
    SPAWN_CLUSTER_PROCS: number,
    API_URL_PREFIX: string,
    POLL_RATE_MS: number,
    CACHE_DIR: string,
    CACHE_ENABLED: boolean,
    CLEAR_PROTECTION_MINUTES: number,
    RECOMMENDED_FEE_PERCENTILE: number,
    BLOCK_WEIGHT_UNITS: number,
    INITIAL_BLOCKS_AMOUNT: number,
    MEMPOOL_BLOCKS_AMOUNT: number,
    INDEXING_BLOCKS_AMOUNT: number,
    BLOCKS_SUMMARIES_INDEXING: boolean,
    GOGGLES_INDEXING: boolean,
    USE_SECOND_NODE_FOR_MINFEE: boolean,
    EXTERNAL_ASSETS: array(string), //@TODO confirm
    EXTERNAL_MAX_RETRY: number,
    EXTERNAL_RETRY_INTERVAL: number,
    USER_AGENT: string,
    STDOUT_LOG_MIN_PRIORITY: string,
    AUTOMATIC_POOLS_UPDATE: boolean,
    POOLS_JSON_URL: string,
    POOLS_JSON_TREE_URL: string,
    POOLS_UPDATE_DELAY: number,
    AUDIT: boolean,
    RUST_GBT: boolean,
    LIMIT_GBT: boolean,
    CPFP_INDEXING: boolean,
    DISK_CACHE_BLOCK_INTERVAL: number,
    MAX_PUSH_TX_SIZE_WEIGHT: number,
    ALLOW_UNREACHABLE: boolean,
    PRICE_UPDATES_PER_HOUR: number,
    MAX_TRACKED_ADDRESSES: number,
    UNIX_SOCKET_PATH: string,
  }),
  CORE_RPC: object({
    HOST: string,
    PORT: number,
    USERNAME: string,
    PASSWORD: string,
    TIMEOUT: number,
    COOKIE: boolean,
    COOKIE_PATH: string,
    DEBUG_LOG_PATH: string,
  }),
  ELECTRUM: object({
    HOST: string,
    PORT: number,
    TLS_ENABLED: boolean,
  }),
  ESPLORA: object({
    REST_API_URL: string,
    UNIX_SOCKET_PATH: string,
    BATCH_QUERY_BASE_SIZE: number,
    RETRY_UNIX_SOCKET_AFTER: number,
    REQUEST_TIMEOUT: number,
    FALLBACK_TIMEOUT: number,
    FALLBACK: array(string), // @TODO confirm
    MAX_BEHIND_TIP: number,
  }),
  SECOND_CORE_RPC: object({
    HOST: string,
    PORT: number,
    USERNAME: string,
    PASSWORD: string,
    TIMEOUT: number,
    COOKIE: boolean,
    COOKIE_PATH: string,
  }),
  DATABASE: object({
    ENABLED: boolean,
    HOST: string,
    PORT: number,
    SOCKET: string,
    DATABASE: string,
    USERNAME: string,
    PASSWORD: string,
    TIMEOUT: number,
    PID_DIR: string,
  }),
  SYSLOG: object({
    ENABLED: boolean,
    HOST: string,
    PORT: number,
    MIN_PRIORITY: string,
    FACILITY: string,
  }),
  STATISTICS: object({
    ENABLED: boolean,
    TX_PER_SECOND_SAMPLE_PERIOD: number,
  }),
  MAXMIND: object({
    ENABLED: boolean,
    GEOLITE2_CITY: string,
    GEOLITE2_ASN: string,
    GEOIP2_ISP: string,
  }),
  LIGHTNING: object({
    ENABLED: boolean,
    BACKEND: string,
    STATS_REFRESH_INTERVAL: number,
    GRAPH_REFRESH_INTERVAL: number,
    LOGGER_UPDATE_INTERVAL: number,
    FORENSICS_INTERVAL: number,
    FORENSICS_RATE_LIMIT: number,
  }),
  LND: object({
    TLS_CERT_PATH: string,
    MACAROON_PATH: string,
    REST_API_URL: string,
    TIMEOUT: number,
  }),
  CLIGHTNING: object({
    SOCKET: string,
  }),
  SOCKS5PROXY: object({
    ENABLED: boolean,
    USE_ONION: boolean,
    HOST: string,
    PORT: number,
    USERNAME: string,
    PASSWORD: string,
  }),
  EXTERNAL_DATA_SERVER: object({
    MEMPOOL_API: string,
    MEMPOOL_ONION: string,
    LIQUID_API: string,
    LIQUID_ONION: string,
  }),
  REDIS: object({
    ENABLED: boolean,
    UNIX_SOCKET_PATH: string,
    BATCH_QUERY_BASE_SIZE: number,
  }),
  REPLICATION: object({
    ENABLED: boolean,
    AUDIT: boolean,
    AUDIT_START_HEIGHT: number,
    STATISTICS: boolean,
    STATISTICS_START_TIME: number,
    SERVERS: array(string),
  }),
  MEMPOOL_SERVICES: object({
    API: string,
    ACCELERATIONS: boolean,
  }),
  FIAT_PRICE: object({
    ENABLED: boolean,
    PAID: boolean,
    API_KEY: string,
  }),
})

export const jsonFile = FileHelper.json(
  '/media/startos/volumes/backend/mempool-config.json',
  shape,
)
